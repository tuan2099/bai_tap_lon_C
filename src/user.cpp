#include "user.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <memory>
#include <cstdlib>
#include <ctime>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <cstdio>

using namespace std;

const string DATA_DIR = "data/"; // users.txt - file dữ liệu

// Hàm khơi tạo người dùng
User::User(string u, string p, string f, string e, string ph, string r, string w, string oathKey, bool autoGen)
    : username(u), password(p), fullName(f), email(e), phone(ph), role(r), walletID(w), isAutoGeneratedPassword(autoGen), oathSecretKey(oathKey) {}
    

// Tự sinh OTP 
string generateSimulatedOTP() {
    string otp;
    srand(time(0) + rand());
    for (int i = 0; i < 6; ++i) {
        otp += to_string(rand() % 10);
    }
    return otp;
}

// Hàm check otp
bool verifyOTP(const string& secretKey, const string& userOtp) {
    string command = "oathtool --totp -b \"" + secretKey + "\"";
    unique_ptr<FILE, decltype(&pclose)> pipe(popen(command.c_str(), "r"), pclose);
    if (!pipe) {
        cerr << "Loi: Khong the chay lenh oathtool." << endl;
        return false;
    }
    char buffer[128];
    string result;
    while (fgets(buffer, sizeof(buffer), pipe.get())) {
        result += buffer;
    }
    if (!result.empty() && result.back() == '\n') {
        result.pop_back();
    }
    return result == userOtp;
}



// Lưu thông tin người dùng
void saveUsers(const vector<User>& users, const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    ofstream file(filename);
    if (!file.is_open()) {
        cerr << "Loi: Khong the mo file " << filename << " de ghi (Dam bao thu muc 'data/' ton tai)." << endl;
        return;
    }
    for (const auto& user : users) {
        file << user.username << "," << user.password << "," << user.fullName << ","
             << user.email << "," << user.phone << "," << user.role << ","
             << user.walletID << "," << (user.isAutoGeneratedPassword ? "1" : "0") << ","
             << user.oathSecretKey << "\n";
    }
    file.close();
    string backupCmd = "cp \"" + filename + "\" \"" + backupFilename + "\"";
#ifdef _WIN32
    backupCmd = "copy \"" + filename + "\" \"" + backupFilename + "\"";
#endif
    int result = system(backupCmd.c_str());
    if (result != 0) {
        cerr << "Canh bao: Khong the tao file backup cho " << filename << ". Ma loi: " << result << endl;
    }
}

// get data user từ database
vector<User> loadUsers(const string& relativeFilename) {
    string filename = DATA_DIR + relativeFilename;
    string backupFilename = filename + ".bak";
    vector<User> users;
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Canh bao: Khong the mo file " << filename << ". Dang thu doc tu file backup " << backupFilename << endl;
        ifstream backupFile(backupFilename);
        if (backupFile.is_open()) {
            file.swap(backupFile);
        } else {
            cerr << "Canh bao: Khong the mo ca file chinh va file backup trong 'data/'. Bat dau voi danh sach trong." << endl;
            return users;
        }
    }
    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string segment;
        vector<string> seglist;
        while (getline(ss, segment, ',')) {
            seglist.push_back(segment);
        }
        if (seglist.size() >= 9) {
            string username = seglist[0];
            string password = seglist[1];
            string fullName = seglist[2];
            string email = seglist[3];
            string phone = seglist[4];
            string role = seglist[5];
            string walletID = seglist[6];
            bool isAutoGen = (seglist[7] == "1");
            string oathSecretKey = seglist[8];
            users.emplace_back(username, password, fullName, email, phone, role, walletID, oathSecretKey, isAutoGen);
        } else {
            cerr << "Canh bao: Dong du lieu khong hop le trong users.txt: " << line << endl;
        }
    }
    file.close();
    return users;
}

// Tạo user mới / đăng kí tài khoản
User createNewUser(vector<User>& users, bool isAdminRegistration) {
    string username, password, fullName, email, phone, role, walletID, oathSecretKey;
    bool autoGenPassword = false;

    cout << "Nhập tên đăng nhập: ";
    cin >> username;
    for (const auto& user : users) {
        if (user.username == username) {
            cout << "Tên đăng nhập đã tồn tại! Vui lòng chọn tên khác." << endl;
            return User("", "", "", "", "", "", "", "", false);
        }
    }

    if (isAdminRegistration) {
        cout << "Đăng ký bởi quản lý. Mật khẩu sẽ được tự động sinh." << endl;
        password = generateRandomPassword(10);
        autoGenPassword = true;
        cout << "Mật khẩu tự sinh: " << password << " (Yêu cầu người dùng đổi khi đăng nhập lần đầu)." << endl;
    } else {
        cout << "Nhập mật khẩu: ";
        cin >> password;
    }

    cout << "Nhập họ tên: ";
    cin.ignore();
    getline(cin, fullName);
    cout << "Nhập email: ";
    cin >> email;
    cout << "Nhập số điện thoại: ";
    cin >> phone;

    role = "user";
    walletID = "W_" + username + "_" + to_string(rand() % 1000);
    oathSecretKey = generateOATHSecretKey();

    cout << "\nThiết lập xác thực hai yếu tố (2FA)" << endl;
    cout << "Vui lòng thêm khóa bí mật sau vào ứng dụng xác thực của bạn (Google Authenticator, Authy, ...):" << endl;
    cout << "Khóa bí mật (Base32): " << oathSecretKey << endl;
    cout << "LƯU Ý: Đây là lần duy nhất khóa này được hiển thị. Hãy lưu lại cẩn thận!" << endl;

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
        cout << "Lỗi nghiêm trọng: Không thể băm mật khẩu." << endl;
        return User("", "", "", "", "", "", "", "", false);
    }

    User newUser(username, hashedPassword, fullName, email, phone, role, walletID, oathSecretKey, autoGenPassword);
    users.push_back(newUser);
    cout << "Đăng ký tài khoản thành công cho: " << username << endl;
    return newUser;
}

string getCurrentOTP(const string& secretKey) {
    string otp;
    FILE* pipe = popen(("oathtool --totp -b " + secretKey).c_str(), "r");
    if (pipe) {
        char buffer[128];
        while (fgets(buffer, sizeof(buffer), pipe)) {
            otp += buffer;
        }
        pclose(pipe);
        if (!otp.empty() && otp.back() == '\n') {
            otp.pop_back(); // Xoá ký tự xuống dòng
        }
    }
    return otp;
}


// Đăng nhập
User* login(vector<User>& users) {
    string username, password, otp;
    cout << " Nhập tên đăng nhập: ";
    cin >> username;
    cout << "Nhập mật khẩu: ";
    cin >> password;

    string hashedPassword = hashPassword(password);
    if (hashedPassword.empty()) {
        cout << " Đã xảy ra lỗi khi băm mật khẩu để so sánh." << endl;
        return nullptr;
    }

    for (auto& user : users) {
        if (user.username == username && user.password == hashedPassword) {
            cout << "DEBUG - Mã OTP hiện tại: " << getCurrentOTP(user.oathSecretKey) << endl;
            cout << "Nhập mã OTP từ ứng dụng xác thực của bạn: ";
            cin >> otp;

            if (verifyOTP(user.oathSecretKey, otp)) {
                cout << "Xác thực OTP thành công!" << endl;

                if (user.isAutoGeneratedPassword) {
                    cout << " Bạn đang sử dụng mật khẩu được tạo tự động. Vui lòng đặt mật khẩu mới." << endl;
                    string newPassword, confirmPassword;
                    do {
                        cout << " Nhập mật khẩu mới: ";
                        cin >> newPassword;
                        cout << "Xác nhận mật khẩu mới: ";
                        cin >> confirmPassword;

                        if (newPassword != confirmPassword) {
                            cout << "Mật khẩu xác nhận không khớp. Vui lòng nhập lại." << endl;
                        }
                    } while (newPassword != confirmPassword);

                    user.password = hashPassword(newPassword);
                    user.isAutoGeneratedPassword = false;
                    saveUsers(users, "users.txt");
                    cout << " Đổi mật khẩu thành công." << endl;
                }

                cout << " Đăng nhập thành công!" << endl;
                return &user;
            } else {
                cout << " Xác thực OTP thất bại!" << endl;
                return nullptr;
            }
        }
    }

    cout << " Đăng nhập thất bại! Tên đăng nhập hoặc mật khẩu không đúng." << endl;
    return nullptr;
}

// Hàm tạo Pass ngẫu nhiên trong trường hợp admin tạo pass cho user
string generateRandomPassword(int length) {
    const string charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?";
    string password;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        password += charset[rand() % charset.size()];
    }
    return password;
}

// auto gen secrect key 
string generateOATHSecretKey(int length) {
    const string base32_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
    string key;
    srand(time(0) + rand());
    for (int i = 0; i < length; ++i) {
        key += base32_chars[rand() % base32_chars.size()];
    }
    return key;
}

// Đổi Password
void changePassword(User& user, vector<User>& users) {
    string currentPassword, newPassword, confirmPassword;
    cout << "Nhap mat khau hien tai: ";
    cin >> currentPassword;

    string currentHashedPassword = hashPassword(currentPassword);
    if (currentHashedPassword.empty()) {
        cout << "Loi khi kiem tra mat khau hien tai." << endl;
        return;
    }
    if (currentHashedPassword != user.password) {
        cout << "Mat khau hien tai khong dung!\n";
        return;
    }

    do {
        cout << "Nhap mat khau moi: ";
        cin >> newPassword;
        cout << "Xac nhan mat khau moi: ";
        cin >> confirmPassword;
        if (newPassword != confirmPassword) {
            cout << "Mat khau xac nhan khong khop. Vui long thu lai.\n";
        }
    } while (newPassword != confirmPassword);

    string otp = generateSimulatedOTP();
    cout << "Ma OTP (mo phong gui den email/phone " << user.email << "/" << user.phone << "): " << otp << "\n";
    string inputOtp;
    cout << "Nhap ma OTP da nhan duoc: ";
    cin >> inputOtp;

    if (inputOtp == otp) {
        string newHashedPassword = hashPassword(newPassword);
        if (newHashedPassword.empty()) {
            cout << "Loi khi bam mat khau moi. Khong the doi mat khau." << endl;
            return;
        }
        user.password = newHashedPassword;
        user.isAutoGeneratedPassword = false;
        saveUsers(users, "users.txt");
        cout << "Doi mat khau thanh cong!\n";
    } else {
        cout << "Ma OTP khong dung! Doi mat khau that bai.\n";
    }
}

// Chỉnh sửa thông tin người dùng với quyền admin
void EditUserWithAdminRole(vector<User>& users) {
    string targetUsername;
    cout << "Vui lòng nhập tên đăng nhập của người dùng cần chỉnh sửa: ";
    cin >> targetUsername;

    User* targetUser = nullptr;
    for (auto& user : users) {
        if (user.username == targetUsername) {
            targetUser = &user;
            break;
        }
    }

    if (targetUser) {
        cout << "Đã tìm thấy người dùng: " << targetUsername << ". Tiến hành cập nhật thông tin." << endl;
        string fullName, email, phone, role;

        cout << "Họ và tên hiện tại: " << targetUser->fullName << ". Nhập tên mới (Enter để giữ nguyên): ";
        cin.ignore();
        getline(cin, fullName);
        if (!fullName.empty()) targetUser->fullName = fullName;

        cout << "Email hiện tại: " << targetUser->email << ". Nhập email mới: ";
        cin >> email;
        if (!email.empty()) targetUser->email = email;

        cout << "Số điện thoại hiện tại: " << targetUser->phone << ". Nhập số mới: ";
        cin >> phone;
        if (!phone.empty()) targetUser->phone = phone;

        cout << "Vai trò hiện tại (user/admin): " << targetUser->role << ". Nhập vai trò mới: ";
        cin >> role;
        if (!role.empty() && (role == "user" || role == "admin")) {
            targetUser->role = role;
        } else if (!role.empty()) {
            cout << "Cảnh báo: Vai trò không hợp lệ. Đã giữ nguyên vai trò hiện tại." << endl;
        }

        saveUsers(users, "users.txt");
        cout << "Cập nhật thông tin người dùng " << targetUsername << " thành công!" << endl;
    } else {
        cout << "Lỗi: Không tìm thấy người dùng với tên đăng nhập: " << targetUsername << endl;
    }
}

string bytesToHexString(const unsigned char* bytes, size_t len) {
    stringstream ss;
    ss << hex << setfill('0');
    for (size_t i = 0; i < len; ++i) {
        ss << setw(2) << static_cast<int>(bytes[i]);
    }
    return ss.str();
}

// Hàm băm password - sử dụng -> mã hoá mk, tránh lưu mk trực tiếp vào db
string hashPassword(const string& password) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    unique_ptr<EVP_MD_CTX, decltype(&EVP_MD_CTX_free)> mdctx(EVP_MD_CTX_new(), EVP_MD_CTX_free);

    if (!mdctx) {
        cerr << "Lỗi: Không thể khởi tạo mật khẩu băm." << endl;
        return "";
    }

    if (EVP_DigestInit_ex(mdctx.get(), EVP_sha256(), nullptr) != 1 ||
        EVP_DigestUpdate(mdctx.get(), password.c_str(), password.size()) != 1 ||
        EVP_DigestFinal_ex(mdctx.get(), hash, nullptr) != 1) {
        cerr << "Lỗi: Không thể hoàn tất quá trình băm mật khẩu." << endl;
        return "";
    }

    return bytesToHexString(hash, SHA256_DIGEST_LENGTH);
}

// Cập nhật thông tin người dùng - cả admin & user
void updateProfileUser(User& user, vector<User>& users) {
    string fullName, email, phone;
    cout << "Cập nhật thông tin cá nhân của bạn." << endl;

    cout << "Họ tên hiện tại: " << user.fullName << ". Nhập họ tên mới (Enter để giữ nguyên): ";
    cin.ignore();
    getline(cin, fullName);

    cout << "Email hiện tại: " << user.email << ". Nhập email mới: ";
    cin >> email;

    cout << "Số điện thoại hiện tại: " << user.phone << ". Nhập số điện thoại mới: ";
    cin >> phone;

    string otp = generateSimulatedOTP();
    cout << "Mã OTP (đã gửi đến email/điện thoại cũ: " << user.email << "/" << user.phone << "): " << otp << "\n";

    string inputOtp;
    cout << "Vui lòng nhập mã OTP để xác nhận: ";
    cin >> inputOtp;

    if (inputOtp == otp) {
        if (!fullName.empty()) user.fullName = fullName;
        if (!email.empty()) user.email = email;
        if (!phone.empty()) user.phone = phone;

        saveUsers(users, "users.txt");
        cout << "Thông tin cá nhân của bạn đã được cập nhật thành công!" << endl;
    } else {
        cout << " Mã OTP không chính xác. Cập nhật thông tin thất bại." << endl;
    }
}

// Xem danh sách người dùng - chỉ admin mới xem được
void ViewInfoUserbyAdmin(const vector<User>& users) {
    cout << "\n===== Danh sách người dùng =====" << endl;
    cout << left << setw(20) << "Tên đăng nhập" << setw(15) << "Vai trò" << setw(30) << "Họ và tên" << setw(15) << "Mã ví" << endl;
    cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;

    if (users.empty()) {
        cout << "Không có người dùng nào trong danh sách." << endl;
    } else {
        for (const auto& user : users) {
            cout << left << setw(20) << user.username
                 << setw(15) << user.role
                 << setw(30) << user.fullName
                 << setw(15) << user.walletID << endl;
        }
    }

    cout << "=================================" << endl;
}


